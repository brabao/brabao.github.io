<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Brabao - gggrrrrr...]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.brabao.com.br/"/>
  <updated>2015-05-12T17:16:10.000Z</updated>
  <id>http://www.brabao.com.br/</id>
  
  <author>
    <name><![CDATA[Danilo Ribeiro da Silveira]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Istanbul JavaScript Code Coverage]]></title>
    <link href="http://www.brabao.com.br/Istanbul-JavaScript-Code-Coverage/"/>
    <id>http://www.brabao.com.br/Istanbul-JavaScript-Code-Coverage/</id>
    <published>2015-05-12T14:57:39.000Z</published>
    <updated>2015-05-12T17:16:10.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/istanbul-javascript-code-coverage.png" title="Istanbul JavaScript Code Coverage"><p>Nos últimos artigos mostrei como criar e rodar alguns testes com <code>Jasmine</code> e <code>Karma</code>.</p><p>Hoje vamos ver o <code>Istanbul</code> que é uma ferramenta <code>Code Coverage</code> que nos permite gerenciar quanto do nosso código esta sendo coberto pelo testes.</p><p>Atualmente rodamos os testes e verificamos se o resultado é o esperado, mas não verificamos se os testes passaram por todo código (Ex: Será que o teste cobriu esse IF?).</p><p>Para esse artigo vamos rodar o <code>Istanbul</code> junto com o <code>Karma</code>. Se você acompanhou os posts anteriores já deve ter o <code>Karma</code> instalado, senão recomendo a leitura do artigo <a href="http://brabao.com.br/Karma-Test-Runner/" target="_blank" rel="external">Karma Test Runner</a></p><h2 id="Instalação">Instalação</h2><p>Vamos fazer a instalação do módulo <a href="https://github.com/karma-runner/karma-coverage" target="_blank" rel="external">karma-coverage</a> e salvar a referência<code>devDependency</code> no <code>package.json</code><br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install karma-coverage --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><h2 id="Configuração">Configuração</h2><p>Precisamos adicionar ao arquivo <code>karma.conf.js</code> um novo relatório e informar quais os arquivos devem ser verificados pelo <code>Istanbul</code>.<br><figure class="highlight actionscript"><figcaption><span>language:javascript karma.conf.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">module.exports = <span class="function"><span class="keyword">function</span><span class="params">(config)</span> </span>&#123;</span><br><span class="line">  config.<span class="keyword">set</span>(&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Arquivos testados pelo Karma</span></span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'bower_components/angular/angular.min.js'</span>,</span><br><span class="line">      <span class="string">'bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class="line">      <span class="string">'app/**/*.js'</span>,</span><br><span class="line">      <span class="string">'test/spec/**/*spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Adiciona o relatório do coverage</span></span><br><span class="line">    reporters: [<span class="string">'progress'</span>, <span class="string">'coverage'</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Arquivos que devem ser verificados pelo coverage.</span></span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">      <span class="string">'app/**/*.js'</span>: [<span class="string">'coverage'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>Devemos informar no <code>preprocessors</code> somente os arquivos do projeto, removendo arquivos de biblioteca (angularjs, jquery, etc).</p><p>Para o exemplo vamos testar a calculadora somente com a função <code>Dividir</code><br><figure class="highlight actionscript"><figcaption><span>language:javascript calculadora.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculadora</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Calculadora.prototype.Dividir = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><figure class="highlight actionscript"><figcaption><span>language:javascript calculadora-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Calculadora'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'Dividir 10 por 5 deve ser igual a 2'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.calc.Dividir(<span class="number">10</span>,<span class="number">5</span>)).toEqual(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Rodando_os_testes">Rodando os testes</h2><p>Ao executar o <code>karma start</code> podemos ver que os testes foram executados normalmente e que foi criado no projeto uma nova pasta chamada <code>coverage</code> e uma sub pasta de acordo com o <code>browser</code> usado no <code>Karma</code>. Usamos o <code>PhantoJS</code> então foi criada a pasta <code>PhantomJS 1.9.8 (Linux)</code>.</p><p>Ao abrir o arquivo <code>index.html</code> no navegador, você pode ir navegando entre os arquivos do projeto e acompanhar as informações.<br><img src="/imagens/Istanbul-Code-Coverage-browser-100.png" title="Istanbul-Code-Coverage"><br><img src="/imagens/Istanbul-Code-Coverage-file-100.png" title="Istanbul-Code-Coverage"><br>Nas imagens acima podemos ver que o teste passou por todos <code>Statements</code>, <code>Branches</code>, <code>Functions</code> e <code>Lines</code>.</p><p><strong>Atenção</strong>: não é porque o código esta com 100% de cobertura que todas as funcionalidades foram testadas, 100% quer dizer que o teste passou por todas as partes do código (passou por todos os IF, ELSE, etc).</p><p>Vamos fazer uma alteração no código da calculadora verificando se é divisão por zero.<br><figure class="highlight actionscript"><figcaption><span>language:javascript calculadora.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Calculadora.prototype.Dividir = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><img src="/imagens/Istanbul-Code-Coverage-file-50.png" title="Istanbul-Code-Coverage"><br>Podemos ver que os valores caíram e que nenhum teste verificou o <code>IF</code>.</p><p>Agora que sabemos aonde os testes não estão cobrindo, podemos melhorar nossos testes e testar todas as funcionalidades do sistema.</p><p>Veja a documentação completa para mais detalhes: <a href="http://istanbul-js.org" target="_blank" rel="external">http://istanbul-js.org</a></p><p>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/istanbul-javascript-code-coverage.png" title="Istanbul JavaScript Code Coverage"><p>Nos últimos artigos mostrei como cria]]>
    </summary>
    
      <category term="Code Covarage" scheme="http://www.brabao.com.br/tags/Code-Covarage/"/>
    
      <category term="Istanbul" scheme="http://www.brabao.com.br/tags/Istanbul/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://www.brabao.com.br/tags/NodeJS/"/>
    
      <category term="Testes" scheme="http://www.brabao.com.br/tags/Testes/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Protractor Salvando Screenshot]]></title>
    <link href="http://www.brabao.com.br/Protractor-Salvando-Screenshot/"/>
    <id>http://www.brabao.com.br/Protractor-Salvando-Screenshot/</id>
    <published>2015-05-10T17:35:47.000Z</published>
    <updated>2015-05-11T13:44:51.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/protractor-screenshot.png" title="Protractor Screenshot"><p>No post <a href="http://brabao.com.br/Testes-e2e-com-Protractor/" target="_blank" rel="external">Testes e2e com Protractor</a> fiz uma introdução ao <code>Protractor</code> e vimos que toda interação com o navegador é feito através da variável global <code>browser</code>.</p><p>Hoje vou mostrar como salvar uma imagem (<code>screenshot</code>) ao final de cada <code>spec</code> utilizando a função <code>browser.takeScreenshot()</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">afterEach(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">//Rodar sempre depois de cada spec</span></span><br><span class="line">  browser.takeScreenshot().then(<span class="function"><span class="keyword">function</span> <span class="params">(arquivo)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//arquivo contém o buffer do screenshot</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>Como o <code>Protractor</code> roda no <a href="http://www.nodejs.org" target="_blank" rel="external">Node.js</a>, vamos utilizar o <a href="https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options" target="_blank" rel="external">fs.createWriteStream</a> para salvar a imagem no diretório <code>screenshots</code> (Não esqueça de criar o diretório antes de rodar).</p><p>O <code>Jasmine</code> disponibiliza no objeto <code>jasmine.getEnv().currentSpec</code> várias informações do <code>spec</code> atual. Podemos obter a descrição do <code>spec</code>, o resultado se foi <code>sucesso</code> ou <code>erro</code> e várias outras informações.</p><p>Usaremos como nome do arquivo a descrição do <code>spec</code> atual, substituindo espaços por <code>-</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">//Rodar sempre depois de cada spec</span></span><br><span class="line">  <span class="keyword">var</span> specAtual = jasmine.getEnv().currentSpec, <span class="comment">//informações do spec atual</span></span><br><span class="line">      diretorio = <span class="string">'screenshots/'</span>;</span><br><span class="line"></span><br><span class="line">  browser.takeScreenshot().then(<span class="function"><span class="keyword">function</span> <span class="params">(arquivo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Nome do arquivo trocando espaço por -</span></span><br><span class="line">    <span class="keyword">var</span> NomeArquivo = specAtual.description.split(<span class="string">' '</span>).join(<span class="string">'-'</span>) + <span class="string">'.png'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Salva o arquivo no diretório</span></span><br><span class="line">    <span class="keyword">var</span> stream = fs.createWriteStream(path.join(diretorio, NomeArquivo));</span><br><span class="line">    stream.write(<span class="keyword">new</span> Buffer(arquivo, <span class="string">'base64'</span>));</span><br><span class="line">    stream.end();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>As vezes queremos salvar somente o <code>screenshot</code> dos testes que falharam. Podemos fazer a verificação comparando o resultado do <code>spec</code> atual.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">afterEach(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">//Rodar sempre depois de cada spec</span></span><br><span class="line">  <span class="keyword">var</span> specAtual = jasmine.getEnv().currentSpec, <span class="comment">//informações do spec atual</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">if</span>(!specAtual.results().passed()) &#123;</span><br><span class="line">    <span class="comment">//browser.takeScreenshot()....</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Criando_módulo">Criando módulo</h2><p>Para reaproveitar o código em outros testes, podemos criar um módulo com as funções <code>takeScreenshot</code> e <code>takeScreenshotIfError</code> que salva a imagem somente se o teste falhar.</p><p>Para o exemplo criamos o módulo no arquivo <code>ScreenShot.js</code><br><figure class="highlight javascript"><figcaption><span>ScreenShot.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//Salva a imagem</span></span><br><span class="line">  takeScreenshot: <span class="function"><span class="keyword">function</span><span class="params">(specAtual)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> diretorio = <span class="string">'screenshots/'</span>;</span><br><span class="line">    browser.takeScreenshot().then(<span class="function"><span class="keyword">function</span> <span class="params">(arquivo)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//Nome do arquivo trocando espaço por -</span></span><br><span class="line">      <span class="keyword">var</span> NomeArquivo = specAtual.description.split(<span class="string">' '</span>).join(<span class="string">'-'</span>) + <span class="string">'.png'</span>;</span><br><span class="line">      <span class="keyword">var</span> stream = fs.createWriteStream(path.join(diretorio, NomeArquivo));</span><br><span class="line">      stream.write(<span class="keyword">new</span> Buffer(arquivo, <span class="string">'base64'</span>));</span><br><span class="line">      stream.end();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//Salva a imagem somente se o teste falhar</span></span><br><span class="line">  takeScreenshotIfError: <span class="function"><span class="keyword">function</span><span class="params">(specAtual)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!specAtual.results().passed())</span><br><span class="line">      <span class="keyword">this</span>.takeScreenshot(specAtual);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Aplicando o módulo ao teste<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> screenshot = <span class="built_in">require</span>(<span class="string">'./ScreenShot'</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">afterEach(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">//Rodar sempre depois de cada spec</span></span><br><span class="line">  <span class="keyword">var</span> specAtual = jasmine.getEnv().currentSpec;</span><br><span class="line">  screenshot.takeScreenshot(specAtual);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/protractor-screenshot.png" title="Protractor Screenshot"><p>No post <a href="http://brabao.com.br/Testes-e2e-com-Protract]]>
    </summary>
    
      <category term="AngularJS" scheme="http://www.brabao.com.br/tags/AngularJS/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://www.brabao.com.br/tags/NodeJS/"/>
    
      <category term="Protractor" scheme="http://www.brabao.com.br/tags/Protractor/"/>
    
      <category term="Testes" scheme="http://www.brabao.com.br/tags/Testes/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Testes e2e com Protractor]]></title>
    <link href="http://www.brabao.com.br/Testes-e2e-com-Protractor/"/>
    <id>http://www.brabao.com.br/Testes-e2e-com-Protractor/</id>
    <published>2015-05-06T14:58:57.000Z</published>
    <updated>2015-05-10T14:28:04.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/testes-e2e-com-protractor.png" title="Testes e2e com Protractor"><p>No post <a href="http://brabao.com.br/Testando-JavaScript-com-Jasmine/" target="_blank" rel="external">Testando JavaScript com Jasmine</a> mostrei como fazer testes unitários, visualizar os resultados e entendemos que com os testes unitários testamos pequenas partes do nosso código. Agora veremos um pouco sobre o teste e2e (end-to-end).</p><p>O foco do teste e2e (end-to-end) é testar aplicações como se fosse o usuário final, ou seja, abrindo o browser, preenchendo campos, enviando formulários, lendo valores, etc.</p><p>Para este exemplo vamos usar a aplicação <a href="http://todomvc.com/examples/angularjs-perf" target="_blank" rel="external">TodoMVC AngularJS</a></p><h2 id="Instalação">Instalação</h2><p>Como o Protractor é uma ferramenta que roda no <a href="http://www.nodejs.org" target="_blank" rel="external">Node.js</a> podemos fazer a instalação usando o <a href="https://npmjs.org/package/karma" target="_blank" rel="external">NPM</a>.<br>A instalação deve ser feita global usando o parâmetro -g.<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g protractor</span><br></pre></td></tr></table></figure><br>Esse comando irá instalar o <code>Protractor</code> e o <code>webdriver-manager</code>.<br>O <code>webdriver-manager</code> cria uma instancia do <code>Selenium Server</code> que é aonde interagimos com o browser via comandos…vamos ver isso daqui a pouco :)</p><p>O próximo passo é atualizar o <code>webdriver-manager</code><br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webdriver-manager <span class="keyword">update</span></span><br></pre></td></tr></table></figure></p><h2 id="webdriver-manager">webdriver-manager</h2><p>Inicialize o servidor com o comando abaixo que irá rodar o <code>selenium server</code><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webdriver-manager <span class="built_in">start</span></span><br></pre></td></tr></table></figure><br>No console pode se ver que o servidor esta acessível em <a href="http://127.0.0.1:4444/wd/hub" target="_blank" rel="external">http://127.0.0.1:4444/wd/hub</a><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO - RemoteWebDriver instances should connect <span class="string">to:</span> <span class="string">http:</span><span class="comment">//127.0.0.1:4444/wd/hub</span></span><br></pre></td></tr></table></figure><br>Ao abrir a <code>url</code> podemos criar sessões de outros browsers, carregar scripts, e até tirar prints.<br><img src="/imagens/testes-e2e-com-protractor-webdriver-manager.png" title="webdriver-manager">O Protractor faz essa interação com o <code>webdriver-manager/Selenium Server</code> via comandos nos testes.</p><h2 id="Protractor">Protractor</h2><p>Assim como fizemos no <code>Karma</code> devemos criar um arquivo de configuração aonde podemos informar qual o navegador vai ser utilizado, quais os arquivos de testes serão executados, qual a url do <code>Selenium Server</code> etc.<br><figure class="highlight javascript"><figcaption><span>conf.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exports.config = &#123;</span><br><span class="line">  seleniumAddress: <span class="string">'http://localhost:4444/wd/hub'</span>,</span><br><span class="line">  specs: [<span class="string">'spec/**/*.js'</span>],</span><br><span class="line">  framework: <span class="string">'jasmine'</span>,</span><br><span class="line">  capabilities: &#123; browserName: <span class="string">'chrome'</span> &#125;,</span><br><span class="line">  jasmineNodeOpts: &#123;</span><br><span class="line">    showColors: <span class="literal">true</span>,</span><br><span class="line">    isVerbose: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Agora podemos chamar o comando <code>protractor conf.js</code> para executar os testes.</p><h2 id="Iniciando_os_testes">Iniciando os testes</h2><p>No primeiro teste vamos interagir com o navegador acessando a <code>url</code> da aplicação e comparando o título da página.</p><p>O acesso ao navegador é feito através da variável global <code>browser</code> quem contem o método <code>get</code> que faz a requisição da página e o método <code>getTitle</code> que retorna o título da página.<br><figure class="highlight javascript"><figcaption><span>todomvc-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'TodoMVC'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  it(<span class="string">'Deve ter um titulo'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    browser.get(<span class="string">'http://todomvc.com/examples/angularjs-perf'</span>);</span><br><span class="line">    expect(browser.getTitle()).toEqual(<span class="string">'AngularJS • TodoMVC'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>Como todos os testes vão acessar a página, vamos adicionar o código no <code>beforeEach</code><br><figure class="highlight javascript"><figcaption><span>todomvc-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'TodoMVC'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    browser.get(<span class="string">'http://todomvc.com/examples/angularjs-perf'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Interagindo_com_os_elementos_da_página">Interagindo com os elementos da página</h2><p>Para que possamos trabalhar com os elementos da página o Protractor nos fornece a função global <code>element</code>. Podemos pensar nessa função como a função <code>$()</code> da biblioteca <code>Jquery</code> aonde podemos manipular o <code>DOM</code> e executar ações como <code>click</code> e outras.</p><p>Veja abaixo alguns exemplos de como podemos fazer a seleção dos elementos.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Seleciona o elemento via CSS</span></span><br><span class="line"><span class="comment">//&lt;div class="class-exemplo"&gt;</span></span><br><span class="line"><span class="comment">//O mesmo que $('.class-exemplo') do Jquery</span></span><br><span class="line">element(by.css(<span class="string">'.class-exemplo'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Seleciona o elemento pelo ID</span></span><br><span class="line"><span class="comment">//&lt;div id="id-exemplo"&gt;</span></span><br><span class="line"><span class="comment">//O mesmo que $('#class-exemplo') do Jquery</span></span><br><span class="line">element(by.id(<span class="string">'id-exemplo'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Seleciona o elemento pelo Model do AngularJS</span></span><br><span class="line"><span class="comment">//&lt;div data-ng-model="Usuario.Nome"&gt;</span></span><br><span class="line">element(by.model(<span class="string">'Usuario.Nome'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Seleciona o elemento que esta vinculado ao Model</span></span><br><span class="line"><span class="comment">//&lt;p&gt;&#123;&#123;Usuario.Nome&#125;&#125;&lt;/p&gt;</span></span><br><span class="line">element(by.binding(<span class="string">'Usuario.Nome'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//Podemos fazer a seleção de vários elementos utilizando o `element.all`</span></span><br><span class="line">element.all(by.css(<span class="string">'.class-exemplo'</span>)).then(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Seleciona os elementos de um ng-repeat</span></span><br><span class="line"><span class="comment">//&lt;li ng-repeat="todo in todos"&gt;</span></span><br><span class="line">element.all(by.repeater(<span class="string">'todo in todos'</span>));</span><br></pre></td></tr></table></figure><br>Veja abaixo alguns exemplos de ações que podemos fazer com os elementos.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*ELEMENTOS*/</span></span><br><span class="line"><span class="keyword">var</span> BtnEnviar = element(by.id(<span class="string">'BtnEnviar'</span>)); <span class="comment">//&lt;input id="BtnEnviar" type="submit" value="Submit"&gt;</span></span><br><span class="line"><span class="keyword">var</span> TxtNome = element(by.id(<span class="string">'Nome'</span>)); <span class="comment">//&lt;input id="Nome" type="text" name="Nome" value=""&gt;</span></span><br><span class="line"><span class="keyword">var</span> VariosItens = element.all(by.css(<span class="string">'.item'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*AÇÕES*/</span></span><br><span class="line"><span class="comment">//Informa se o elemento esta presente na página</span></span><br><span class="line">TxtNome.isPresent();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Efetua um click no botão</span></span><br><span class="line">BtnEnviar.click();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Preenche o campo com o texto</span></span><br><span class="line">TxtNome.sendKeys(<span class="string">'Hello World!!!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Limpa o campo de texto</span></span><br><span class="line">TxtNome.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//faz a leitura do atributo value do elemento</span></span><br><span class="line">TxtNome.getAttribute(<span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retorna a quantidade de itens</span></span><br><span class="line">VariosItens.count();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retorna o elemento por index</span></span><br><span class="line">VariosItens.get(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retorna o primeiro elemento</span></span><br><span class="line">VariosItens.first();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retorna o último elemento</span></span><br><span class="line">VariosItens.last();</span><br></pre></td></tr></table></figure><br>Agora que sabemos localizar os elementos e conhecemos algumas funções vamos ver como ficaria um teste para adicionar um novo item.<br><figure class="highlight javascript"><figcaption><span>todomvc-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'Adiciona novo item'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Elementos</span></span><br><span class="line">  <span class="keyword">var</span> newTodo = element(by.model(<span class="string">'newTodo'</span>));</span><br><span class="line">  <span class="keyword">var</span> todos = element.all(by.repeater(<span class="string">'todo in todos'</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Adiciona o texto e apertamos Enter para enviar o formulário</span></span><br><span class="line">  newTodo.sendKeys(<span class="string">'Hello World!!!'</span>);</span><br><span class="line">  newTodo.sendKeys(protractor.Key.ENTER);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Contamos os itens da lista</span></span><br><span class="line">  expect(todos.count()).toEqual(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>Pronto! Aqui foi somente uma introdução mostrando o que podemos fazer com o Protractor.</p><p>Veja a documentação completa para mais detalhes: <a href="http://angular.github.io/protractor" target="_blank" rel="external">http://angular.github.io/protractor</a></p><p>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/testes-e2e-com-protractor.png" title="Testes e2e com Protractor"><p>No post <a href="http://brabao.com.br/Testando-JavaSc]]>
    </summary>
    
      <category term="AngularJS" scheme="http://www.brabao.com.br/tags/AngularJS/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://www.brabao.com.br/tags/NodeJS/"/>
    
      <category term="Protractor" scheme="http://www.brabao.com.br/tags/Protractor/"/>
    
      <category term="Testes" scheme="http://www.brabao.com.br/tags/Testes/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Karma Test Runner]]></title>
    <link href="http://www.brabao.com.br/Karma-Test-Runner/"/>
    <id>http://www.brabao.com.br/Karma-Test-Runner/</id>
    <published>2015-04-25T17:00:19.000Z</published>
    <updated>2015-05-10T14:28:25.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/karma-test-runner.png" title="Karma Test Runner"><p>No post anterior mostrei um pouco sobre o Jasmine e rodamos os testes abrindo o SpecRunner.html no browser.</p><p>Esse processo acaba sendo um pouco desgastante pois temos que inserir os arquivos direto no HTML (<code>source files</code> e <code>spec files</code>) e executar os testes de forma manual, etc.</p><p>O Karma é uma ferramenta que pode nos auxiliar bastante nesse processo de executar os testes. Podemos inserir os arquivos de forma dinâmica e executar os testes automaticamente assim que os arquivos forem modificados, alem de rodar em vários browsers, etc.</p><h2 id="Instalação">Instalação</h2><p>Como o Karma é uma ferramenta que roda no <a href="http://www.nodejs.org" target="_blank" rel="external">Node.js</a> podemos fazer a instalação usando o <a href="https://npmjs.org/package/karma" target="_blank" rel="external">NPM</a>.</p><p>O primeiro passo é fazer a instalação do Karma no seu projeto e adicionar a referência no <code>package.json</code>.<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install karma --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><p>Como o Karma foi projetado para rodar testes em diversos frameworks (<code>Jasmine</code>, <code>Mocha</code>,…) e executar os testes em vários browsers (<code>launchers</code>) vamos instalar o plugin do Jasmine e do Chrome.<br>Você pode verificar a <a href="https://npmjs.org/browse/keyword/karma-launcher" target="_blank" rel="external">lista de launchers</a> disponíveis.<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install karma-jasmine karma-chrome-launcher --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><p>Todas as dependências foram instaladas dentro de <code>node_modules</code> e o executável do Karma é o <code>node_modules/karma/bin/karma</code>. Para não ter que acessar a pasta sempre para rodar os testes podemos instalar o karma-cli (<code>Commandline Interface</code>) e assim rodar somente o comando <code>Karma start</code> na raiz do nosso projeto.<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -<span class="keyword">g</span> karma-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p><h2 id="Configuração">Configuração</h2><p>Toda configuração o Karma fica por padrão em um arquivo chamado <code>karma.conf</code>.<br>Com a instalação do karma-cli podemos criar esse arquivo facilmente rodando o comando <code>karma init</code> e respondendo algumas perguntas.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ karma init</span><br><span class="line"></span><br><span class="line">Which testing framework <span class="keyword">do</span> you want <span class="keyword">to</span> use ?</span><br><span class="line">Press <span class="keyword">tab</span> <span class="keyword">to</span> <span class="keyword">list</span> possible <span class="keyword">options</span>. Enter <span class="keyword">to</span> <span class="keyword">move</span> <span class="keyword">to</span> the <span class="keyword">next</span> question.</span><br><span class="line">&gt; jasmine</span><br><span class="line"></span><br><span class="line">Do you want <span class="keyword">to</span> use Require.js ?</span><br><span class="line">This will <span class="built_in">add</span> Require.js plugin.</span><br><span class="line">Press <span class="keyword">tab</span> <span class="keyword">to</span> <span class="keyword">list</span> possible <span class="keyword">options</span>. Enter <span class="keyword">to</span> <span class="keyword">move</span> <span class="keyword">to</span> the <span class="keyword">next</span> question.</span><br><span class="line">&gt; <span class="keyword">no</span></span><br><span class="line"></span><br><span class="line">Do you want <span class="keyword">to</span> capture <span class="keyword">a</span> browser automatically ?</span><br><span class="line">Press <span class="keyword">tab</span> <span class="keyword">to</span> <span class="keyword">list</span> possible <span class="keyword">options</span>. Enter <span class="built_in">empty</span> <span class="built_in">string</span> <span class="keyword">to</span> <span class="keyword">move</span> <span class="keyword">to</span> the <span class="keyword">next</span> question.</span><br><span class="line">&gt; Chrome</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">What <span class="keyword">is</span> the location of your <span class="keyword">source</span> <span class="built_in">and</span> test <span class="keyword">files</span> ?</span><br><span class="line">You can use <span class="built_in">glob</span> patterns, eg. <span class="string">"js/*.js"</span> <span class="built_in">or</span> <span class="string">"test/**/*Spec.js"</span>.</span><br><span class="line">Enter <span class="built_in">empty</span> <span class="built_in">string</span> <span class="keyword">to</span> <span class="keyword">move</span> <span class="keyword">to</span> the <span class="keyword">next</span> question.</span><br><span class="line">&gt; *.js</span><br><span class="line">&gt; test/**/*.js</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">Should any of the <span class="keyword">files</span> included by the <span class="keyword">previous</span> patterns <span class="keyword">be</span> excluded ?</span><br><span class="line">You can use <span class="built_in">glob</span> patterns, eg. <span class="string">"**/*.swp"</span>.</span><br><span class="line">Enter <span class="built_in">empty</span> <span class="built_in">string</span> <span class="keyword">to</span> <span class="keyword">move</span> <span class="keyword">to</span> the <span class="keyword">next</span> question.</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">Do you want Karma <span class="keyword">to</span> watch <span class="keyword">all</span> the <span class="keyword">files</span> <span class="built_in">and</span> run the tests <span class="keyword">on</span> <span class="keyword">change</span> ?</span><br><span class="line">Press <span class="keyword">tab</span> <span class="keyword">to</span> <span class="keyword">list</span> possible <span class="keyword">options</span>.</span><br><span class="line">&gt; yes</span><br></pre></td></tr></table></figure></p><p>Com o arquivo <code>karma.conf</code> gerado basta rodar o comando<code>karma start</code> e verificar os testes.</p><h2 id="PhantomJS">PhantomJS</h2><p>Em muitos casos queremos que os testes sejam executados somente no terminal sem que seja aberta a janela do browser.<br>Sendo assim basta instalar o <code>karma-phantomjs-launcher</code> e alterar o browser para <code>PhantomJS</code></p><p>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/karma-test-runner.png" title="Karma Test Runner"><p>No post anterior mostrei um pouco sobre o Jasmine e rodamos os testes]]>
    </summary>
    
      <category term="Jasmine" scheme="http://www.brabao.com.br/tags/Jasmine/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/tags/JavaScript/"/>
    
      <category term="Karma" scheme="http://www.brabao.com.br/tags/Karma/"/>
    
      <category term="NodeJS" scheme="http://www.brabao.com.br/tags/NodeJS/"/>
    
      <category term="Testes" scheme="http://www.brabao.com.br/tags/Testes/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Testando JavaScript com Jasmine]]></title>
    <link href="http://www.brabao.com.br/Testando-JavaScript-com-Jasmine/"/>
    <id>http://www.brabao.com.br/Testando-JavaScript-com-Jasmine/</id>
    <published>2015-04-24T18:55:40.000Z</published>
    <updated>2015-05-10T14:27:52.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/testando-javascript-com-jasmine.png" title="Testando JavaScript com Jasmine"><p>Nesse post vou mostrar um pouco do framework de teste Jasmine.</p><p>O objetivo desse post não é ensinar TDD, não vou apresentar todas as funcionalidades do framework e também não vamos ter exemplos de aplicação real.</p><p>O objetivo é puramente didático, venho somente demonstrar a ferramenta e tentar despertar a curiosidade de quem ainda não trabalha com testes.</p><p>O exemplo a ser testado é uma calculadora com as 4 operações básicas.</p><h2 id="Instalação">Instalação</h2><p>O código fonte do Jasmine esta no GitHub e pode ser baixado em: <a href="https://github.com/jasmine/jasmine" target="_blank" rel="external">https://github.com/jasmine/jasmine</a><br>Para o nosso exemplo vamos manter a seguinte estrutura pastas.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- tests</span><br><span class="line">  - Jasmine <span class="comment">//arquivos do framework</span></span><br><span class="line">    - boot<span class="class">.js</span></span><br><span class="line">    - jasmine<span class="class">.js</span></span><br><span class="line">    - jasmine-<span class="tag">html</span><span class="class">.js</span></span><br><span class="line">    - jasmine<span class="class">.css</span></span><br><span class="line">    - jasmine_favicon<span class="class">.png</span></span><br><span class="line">  - spec <span class="comment">//arquivos de testes</span></span><br><span class="line">    - calculadora-spec<span class="class">.js</span></span><br><span class="line">- Calculadora<span class="class">.js</span> <span class="comment">//arquivo a ser testado</span></span><br><span class="line">- SpecRunner<span class="class">.html</span> <span class="comment">//arquivo para exibir os resultados dos testes</span></span><br></pre></td></tr></table></figure></p><h2 id="Configurando_o_SpecRunner-html">Configurando o SpecRunner.html</h2><p>O arquivo SpecRunner.html é responsável por executar os testes e mostrar os resultados.<br>Ele é somente um arquivo HTML que contem as chamadas para os arquivos do Jasmine, e os arquivos do projeto.<br>Na linha 15 informamos os arquivos que queremos testar (<code>source files</code>) e na linha 18 os arquivos de testes (<code>spec files</code>).<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Jasmine Spec Runner v2.2.0<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"shortcut icon"</span> <span class="attribute">type</span>=<span class="value">"image/png"</span> <span class="attribute">href</span>=<span class="value">"tests/Jasmine/jasmine_favicon.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"tests/Jasmine/jasmine.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"tests/Jasmine/jasmine.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"tests/Jasmine/jasmine-html.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"tests/Jasmine/boot.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- include source files here... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"Calculadora.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- include spec files here... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"tests/spec/calculadora-spec.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Criando_a_calculadora">Criando a calculadora</h2><p>O código abaixo cria a calculadora que vamos testar com as 4 operações.<br><figure class="highlight javascript"><figcaption><span>Calculadora.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculadora</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Calculadora.prototype.Somar = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Calculadora.prototype.Subtrair = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Calculadora.prototype.Multiplicar = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Calculadora.prototype.Dividir = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Iniciando_os_testes">Iniciando os testes</h2><p>A primeira coisa que devemos criar é a nossa suite de testes.<br>Para isso vamos usar a função <code>describe</code> do Jasmine que requer 2 parâmetros: uma <code>string</code> com o título e uma <code>função</code> que é aonde vai ocorrer os testes.<br><figure class="highlight javascript"><figcaption><span>calculadora-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Calculadora'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Cada teste deve ser iniciado usando a função <code>it</code> do Jasmine que também requer 2 parâmetros: uma <code>string</code> com o título e a <code>função</code> que vai ser o teste.<br>Os testes são chamados de <code>Specs</code>.<br><figure class="highlight javascript"><figcaption><span>calculadora-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Calculadora'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//spec</span></span><br><span class="line">  it(<span class="string">'descricao do teste'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Aqui vai os testes</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Para que o teste seja executado o Jasmine tem suas próprias funçõe que devem informar se o teste teve sucesso ou erro. Vamos ver o exemplo do teste de soma.<br><figure class="highlight javascript"><figcaption><span>calculadora-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Calculadora'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//spec</span></span><br><span class="line">  it(<span class="string">'Soma de 5 + 5 deve ser igual a 10'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">    expect(calc.Somar(<span class="number">5</span>,<span class="number">5</span>)).toEqual(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>O teste acima pode ser interpretado assim: “Eu espero que o resultado da soma de 5 + 5 seja igual a 10”.<br>Vamos ver abaixo alguns dos comparadores(<code>Matchers</code>) que o Jasmine oferece.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">expect(<span class="literal">true</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">expect(<span class="literal">false</span>).not.toBe(<span class="literal">true</span>);</span><br><span class="line">expect(<span class="number">12</span>).toEqual(<span class="number">12</span>);</span><br><span class="line">expect(<span class="literal">null</span>).toBeNull();</span><br><span class="line">expect(ColorList).toContain(<span class="string">'red'</span>);</span><br><span class="line">expect(<span class="number">10</span>).toBeLessThan(<span class="number">5</span>);</span><br><span class="line">expect(<span class="number">10</span>).toBeGreaterThan(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><br>O exemplo completo com as 4 operações ficaria assim.<br><figure class="highlight javascript"><figcaption><span>calculadora-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Calculadora'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//spec</span></span><br><span class="line">  it(<span class="string">'Somar 5 + 5 deve ser igual a 10'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">    expect(calc.Somar(<span class="number">5</span>,<span class="number">5</span>)).toEqual(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Subtrair 10 - 5 deve ser igual a 5'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">    expect(calc.Subtrair(<span class="number">10</span>,<span class="number">5</span>)).toEqual(<span class="number">5</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Multiplicar 2 * 5 deve ser igual a 10'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">    expect(calc.Multiplicar(<span class="number">2</span>,<span class="number">5</span>)).toEqual(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Dividir 10 / 5 deve ser igual a 2'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">    expect(calc.Dividir(<span class="number">10</span>,<span class="number">5</span>)).toEqual(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Dividir 10 / 0 nao ´e possivel e deve retornar 0'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">    expect(calc.Dividir(<span class="number">10</span>,<span class="number">0</span>)).toEqual(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Melhorando_o_código">Melhorando o código</h2><p>Se observarmos bem, todos os testes criam uma instancia da calculadora.<br>O Jasmine dispõe dos métodos <code>beforeEach</code>, <code>afterEach</code>, <code>beforeAll</code>, <code>afterAll</code> que nos ajudam a inicializar melhor essas variáveis.<br>Vamos usar o método <code>beforeEach</code> que vai ser rodado antes de cada spec para instanciar a calculadora.<br><figure class="highlight javascript"><figcaption><span>calculadora-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Calculadora'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.calc = <span class="keyword">new</span> Calculadora();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//spec</span></span><br><span class="line">  it(<span class="string">'Somar 5 + 5 deve ser igual a 10'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.calc.Somar(<span class="number">5</span>,<span class="number">5</span>)).toEqual(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Subtrair 10 - 5 deve ser igual a 5'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.calc.Subtrair(<span class="number">10</span>,<span class="number">5</span>)).toEqual(<span class="number">5</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Multiplicar 2 * 5 deve ser igual a 10'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.calc.Multiplicar(<span class="number">2</span>,<span class="number">5</span>)).toEqual(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Dividir 10 / 5 deve ser igual a 2'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.calc.Dividir(<span class="number">10</span>,<span class="number">5</span>)).toEqual(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">'Dividir 10 / 0 nao ´e possivel e deve retornar 0'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.calc.Dividir(<span class="number">10</span>,<span class="number">0</span>)).toEqual(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Agora podemos abrir o arquivo SpecRunner.html no browser e visualizar os resultados.<br><img src="/imagens/testando-javascript-com-jasmine-SpecRunner.png" title="Jasmine SpecRunner"></p><p>Veja a documentação completa: <a href="http://jasmine.github.io/" target="_blank" rel="external">http://jasmine.github.io/</a></p><p>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/testando-javascript-com-jasmine.png" title="Testando JavaScript com Jasmine"><p>Nesse post vou mostrar um pouco do framew]]>
    </summary>
    
      <category term="Jasmine" scheme="http://www.brabao.com.br/tags/Jasmine/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/tags/JavaScript/"/>
    
      <category term="Testes" scheme="http://www.brabao.com.br/tags/Testes/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS Route Resolve]]></title>
    <link href="http://www.brabao.com.br/AngularJS-Route-Resolve/"/>
    <id>http://www.brabao.com.br/AngularJS-Route-Resolve/</id>
    <published>2015-04-14T14:42:34.000Z</published>
    <updated>2015-05-10T14:23:31.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/angularjs-route-resolve.png" title="AngularJS Route Resolve"><p>Um recurso muito interessante das rotas que não vejo muita gente usando é o resolve. Com ele é possível injetar algumas informações direto no controller.</p><p>Para ilustrar esse exemplo vamos simular uma operação de editar um usuário.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.config(<span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span></span>&#123;</span><br><span class="line">  $routeProvider</span><br><span class="line">  .when(<span class="string">'/Editar/:id'</span>, &#123;</span><br><span class="line">    controller: <span class="string">'UserCtrl'</span>,</span><br><span class="line">    templateUrl: <span class="string">'MyApp.html'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line">app.controller(<span class="string">"UserCtrl"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($location, $routeParams, UserService)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">this</span>;</span><br><span class="line">  UserService.getUser($routeParams.id)</span><br><span class="line">    .success(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123; data.User = response; &#125;)</span><br><span class="line">    .error(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123; $location.path(<span class="string">'UserNotFound'</span>); &#125;);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>No exemplo acima o controller faz a busca do usuário através do metodo <code>UserService.getUser</code> que faz uma requisição Ajax através do <code>$http.get</code>.</p><p>Se o usuário foi encontrado (<code>success</code>), preenchemos o scopo <code>User</code> com o <code>response</code>.</p><p>Se o usuário não foi encontrado (<code>error</code>), redirecionamos o usuário para outra rota através do <code>$location.path</code></p><p>Não seria mais interessante a rota verificar se existe o usuário e já injetar o <code>User</code> no controller?</p><h2 id="Vamos_ver_como_isso_funciona_na_prática-">Vamos ver como isso funciona na prática.</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">app.config(<span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span></span>&#123;</span><br><span class="line">  $routeProvider</span><br><span class="line">  .when(<span class="string">'/Editar/:id'</span>, &#123;</span><br><span class="line">    controller: <span class="string">'UserCtrl'</span>,</span><br><span class="line">    templateUrl: <span class="string">'MyApp.html'</span>,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      user: <span class="function"><span class="keyword">function</span><span class="params">($q, $location, $routeParams, UserService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">        UserService.getUser($routeParams.id)</span><br><span class="line">         .success(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123; deferred.resolve(response); &#125;)</span><br><span class="line">         .error(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123; $location.path(<span class="string">'UserNotFound'</span>); &#125;);</span><br><span class="line">        <span class="keyword">return</span> deferred.promise;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line">app.controller(<span class="string">"UserCtrl"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">this</span>;</span><br><span class="line">  data.User = user;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>No exemplo acima movemos toda a lógica para dentro da rota, aonde foi criado o objeto resolve que vai ser injetado no controller.</p><p>Também foi usado o serviço <code>$q</code> porque estamos fazendo uma requisição HTTP e devemos esperar que ela seja executada antes de chamar o controller.</p><p>Finalmente modificamos o controller que agora recebe o <code>user</code> como parâmetro.</p><p>Se você tem dúvidas sobre o funcionamento das promisses, serviço <code>$q</code>… recomendo a leitura do artigo <a href="http://nomadev.com.br/angularjs-promises-promessas-o-guia-definitivo/" target="_blank" rel="external">AngularJS Promises - O guia definitivo</a></p><p>Você também pode usar o resolve para injetar dados iniciais para o controller.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">app.config(<span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span></span>&#123;</span><br><span class="line">  $routeProvider</span><br><span class="line">  .when(<span class="string">'/Listar'</span>, &#123;</span><br><span class="line">    controller: <span class="string">'ListCtrl'</span>,</span><br><span class="line">    templateUrl: <span class="string">'MyApp.html'</span>,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          paginacao: &#123; itensPorPagina: <span class="number">10</span>, ordenarPor: <span class="string">'Nome'</span> &#125;,</span><br><span class="line">          codigos: [<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line">app.controller(<span class="string">"ListCtrl"</span>, <span class="function"><span class="keyword">function</span> <span class="params">($log, init)</span> </span>&#123;</span><br><span class="line">  $log.info(init.paginacao.itensPorPagina);</span><br><span class="line">  $log.info(init.paginacao.ordenarPor);</span><br><span class="line">  $log.info(init.codigos);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/angularjs-route-resolve.png" title="AngularJS Route Resolve"><p>Um recurso muito interessante das rotas que não vejo muit]]>
    </summary>
    
      <category term="AngularJS" scheme="http://www.brabao.com.br/tags/AngularJS/"/>
    
      <category term="JavaScript" scheme="http://www.brabao.com.br/tags/JavaScript/"/>
    
      <category term="AngularJS" scheme="http://www.brabao.com.br/categories/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.brabao.com.br/hello-world/"/>
    <id>http://www.brabao.com.br/hello-world/</id>
    <published>2015-04-13T14:42:34.000Z</published>
    <updated>2015-04-14T14:48:49.000Z</updated>
    <content type="html"><![CDATA[<img src="/imagens/hello-world.png" title="Hello World"><h2 id="Estudou?_Faça_um_post…">Estudou? Faça um post…</h2><p>Dizem que quando você estuda e escreve, aprende duas vezes…</p><p>Este blog foi criado para compartilhar informações sobre o que estou estudando atualmente, minhas experiências em projetos que já desenvolvi, e também praticar um pouco a escrita de textos já que passamos a maior parte do tempo no computador programando.</p><h2 id="Quem_Sou?">Quem Sou?</h2><figure class="highlight javascript"><figcaption><span>about.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  Nome: <span class="string">"Danilo Ribeiro da Silveira"</span>, </span><br><span class="line">  Vulgo: <span class="string">"Brabao"</span>,</span><br><span class="line">  twitter: <span class="string">"@brabao"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Trabalho com desenvolvimento web à mais de 10 anos, comecei meus estudos com PHP, passei a programar em Asp.net e atualmente estou estudando bastante node.js, angular, mongodb etc</p><h2 id="Brabao?">Brabao?</h2><p>Hà alguns anos atrás trabalhando em um projeto com um time maior, sempre que eu fazia um módulo do sistema um amigo sempre comentava “esse cara é brabao…” e o time escutando isso logo começaram a me chamar de brabao. Passando um tempo fui criar uma conta no twitter e toda combinação que eu tentava com meu nome já existia… qual estava disponível?… e assim definitivamente surgiu o <a href="http://twitter.com/brabao" target="_blank" rel="external">@brabao</a> rs.</p><p>Até os próximos artigos!</p>]]></content>
    <summary type="html">
    <![CDATA[<img src="/imagens/hello-world.png" title="Hello World"><h2 id="Estudou?_Faça_um_post…">Estudou? Faça um post…</h2><p>Dizem que quando você ]]>
    </summary>
    
  </entry>
  
</feed>